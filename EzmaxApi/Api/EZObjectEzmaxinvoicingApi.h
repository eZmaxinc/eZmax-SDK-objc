#import <Foundation/Foundation.h>
#import "EZCommonGetAutocompleteV1Response.h"
#import "EZCommonResponseError.h"
#import "EZEzmaxinvoicingGetAutocompleteV2Response.h"
#import "EZEzmaxinvoicingGetObjectV1Response.h"
#import "EZEzmaxinvoicingGetObjectV2Response.h"
#import "EZEzmaxinvoicingGetProvisionalV1Response.h"
#import "EZHeaderAcceptLanguage.h"
#import "EZApi.h"

/**
* eZmax API Definition (Full)
* This API expose all the functionnalities for the eZmax and eZsign applications.
*
* The version of the OpenAPI document: 1.1.14
* Contact: support-api@ezmax.ca
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface EZObjectEzmaxinvoicingApi: NSObject <EZApi>

extern NSString* kEZObjectEzmaxinvoicingApiErrorDomain;
extern NSInteger kEZObjectEzmaxinvoicingApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(EZApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Retrieve Ezmaxinvoicings and IDs
/// Get the list of Ezmaxinvoicing to be used in a dropdown or autocomplete control.
///
/// @param sSelector The type of Ezmaxinvoicings to return
/// @param eFilterActive Specify which results we want to display. Active is the default value. (optional)
/// @param sQuery Allow to filter the returned results (optional)
/// @param acceptLanguage  (optional)
/// 
///  code:200 message:"Successful response"
///
/// @return EZCommonGetAutocompleteV1Response*
-(NSURLSessionTask*) ezmaxinvoicingGetAutocompleteV1WithSSelector: (NSString*) sSelector
    eFilterActive: (NSString*) eFilterActive
    sQuery: (NSString*) sQuery
    acceptLanguage: (EZHeaderAcceptLanguage) acceptLanguage
    completionHandler: (void (^)(EZCommonGetAutocompleteV1Response* output, NSError* error)) handler;


/// Retrieve Ezmaxinvoicings and IDs
/// Get the list of Ezmaxinvoicing to be used in a dropdown or autocomplete control.
///
/// @param sSelector The type of Ezmaxinvoicings to return
/// @param eFilterActive Specify which results we want to display. (optional) (default to @"Active")
/// @param sQuery Allow to filter the returned results (optional)
/// @param acceptLanguage  (optional)
/// 
///  code:200 message:"Successful response"
///
/// @return EZEzmaxinvoicingGetAutocompleteV2Response*
-(NSURLSessionTask*) ezmaxinvoicingGetAutocompleteV2WithSSelector: (NSString*) sSelector
    eFilterActive: (NSString*) eFilterActive
    sQuery: (NSString*) sQuery
    acceptLanguage: (EZHeaderAcceptLanguage) acceptLanguage
    completionHandler: (void (^)(EZEzmaxinvoicingGetAutocompleteV2Response* output, NSError* error)) handler;


/// Retrieve an existing Ezmaxinvoicing
/// 
///
/// @param pkiEzmaxinvoicingID 
/// 
///  code:200 message:"Successful response",
///  code:404 message:"The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body"
///
/// @return EZEzmaxinvoicingGetObjectV1Response*
-(NSURLSessionTask*) ezmaxinvoicingGetObjectV1WithPkiEzmaxinvoicingID: (NSNumber*) pkiEzmaxinvoicingID
    completionHandler: (void (^)(EZEzmaxinvoicingGetObjectV1Response* output, NSError* error)) handler;


/// Retrieve an existing Ezmaxinvoicing
/// 
///
/// @param pkiEzmaxinvoicingID 
/// 
///  code:200 message:"Successful response",
///  code:404 message:"The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body"
///
/// @return EZEzmaxinvoicingGetObjectV2Response*
-(NSURLSessionTask*) ezmaxinvoicingGetObjectV2WithPkiEzmaxinvoicingID: (NSNumber*) pkiEzmaxinvoicingID
    completionHandler: (void (^)(EZEzmaxinvoicingGetObjectV2Response* output, NSError* error)) handler;


/// Retrieve provisional Ezmaxinvoicing
/// 
///
/// 
///  code:200 message:"Successful response",
///  code:422 message:"The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body"
///
/// @return EZEzmaxinvoicingGetProvisionalV1Response*
-(NSURLSessionTask*) ezmaxinvoicingGetProvisionalV1WithCompletionHandler: 
    (void (^)(EZEzmaxinvoicingGetProvisionalV1Response* output, NSError* error)) handler;



@end
